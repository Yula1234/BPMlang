include "std"
include "fsys"
include "string"
include "string_view"
include "self_host/arena"
include "self_host/lexer"

proc compiller_usage fd:int -> void {
	fputs(fd, "Incorrect usage...\n");
	fputs(fd, "Correct is: out <input.bpm>\n");
}

proc main argc:int argv:ptr -> void {
	if(argc != 2) {
		compiller_usage(stdout);
		exit(1);
	}
	let FILE_PATH = nth_argv(argv, 1);
	let file = openf(FILE_PATH, "r");

	let FILE_CONTENT_BUF = memalloc(24 * 1024);
	read_file(file, FILE_CONTENT_BUF);

	let str_arena = new_arena(12 * 1024);
	let tokens = memalloc(56 * 1024);
	let Lexer = new_lexer(FILE_CONTENT_BUF);
	lexer_lex(Lexer, str_arena, tokens);

	lexer_delete(Lexer);
	arena_delete(str_arena);
	memfree(FILE_CONTENT_BUF);
	free_tokens(tokens);
	closef(file);
}