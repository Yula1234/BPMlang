// standarts streams
const stdin 0;
const stdout 1;
const stderr 2;

// booleans constants
const true 1;
const false 0;

proc memcpy src:ptr dst:ptr size:int -> void {
	let i = 0;
	while(i < size) {
		store8(src + i, rd8(dst + i));
		i = i + 1;
	}
}

cextern "write";

proc wrapper_write
	FileDesc:int // file descriptor
	data:ptr // data to write into file
	SizeToWrite:int // size to write data into file
-> int // error code, 0 if success
[
	nostdargs // nostdargs is a say
			  // to a compiller dont generate arguments
] // procedure attributes
{
	asm "push dword [ebp+16]"; // pushing SizeToWrite
	asm "push dword [ebp+12]"; // pushing data
	asm "push dword [ebp+8]"; // pushing FileDesc
	asm "call write"; // error code stored in eax
	// if procedure uses as expr eax returned
	asm "add esp, 12";
}