include "core"

proc strlen str:ptr -> int {
	let i = 0;
	while(rd8(str + i) != 0) {
		i += 1;
	}
	return i;
}

proc streq str1:ptr str2:ptr -> int {
	if(strlen(str1) != strlen(str2)) {
		return false;
	}
	asm "mov ecx, dword [ebp-4]";
	asm "mov edx, dword [ebp-8]";
	asm "xor ebx, ebx";
	asm ".next_iter:";
	asm "cmp byte [ecx+ebx], 0";
	asm "jz .true";
	asm "cmp byte [edx+ebx], 0";
	asm "jz .true";
	asm "xor eax, eax";
	asm "mov al, byte [edx+ebx]";
	asm "cmp byte [ecx+ebx], al";
	asm "jnz .false";
	asm "inc ebx";
	asm "jmp .next_iter";
	asm ".false:";
	return false;
	asm ".true:";
	return true;
}

proc strcpy src:ptr dst:ptr -> void {
	let dstsize = strlen(dst);
	memcopy(src, dst, dstsize);
	store8(src + dstsize, 0);
}