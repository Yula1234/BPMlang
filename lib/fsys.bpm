include "std"

cextern "fopen";
cextern "fclose";
cextern "fileno";
cextern "fgetc";

const EOF 4294967295;

proc fopen_wrapper FilePath:ptr Mode:ptr -> ptr
[nostdargs] {
	asm "push dword [ebp+12]";
	asm "push dword [ebp+8]";
	asm "call fopen";
	asm "add esp, 8";
}

proc fclose_wrapper CFile:ptr -> int
[nostdargs] {
	asm "push dword [ebp+8]";
	asm "call fclose";
	asm "add esp, 4";
}

proc fileno_wrapper CFile:ptr -> int
[nostdargs] {
	asm "push dword [ebp+8]";
	asm "call fileno";
	asm "add esp, 4";
}

proc fgetc_wrapper CFile:ptr -> int
[nostdargs] {
	asm "push dword [ebp+8]";
	asm "call fgetc";
	asm "add esp, 4";
}

struct FILE {
	cfile:ptr, // FILE*
	desc:int  //  descriptor for fputs and format_fprint 
}

proc openf FilePath:ptr Mode:ptr -> FILE {
	let cfile = fopen_wrapper(FilePath, Mode);
	let desc = fileno_wrapper(cfile);
	return FILE(cfile, desc);
}

proc closef f:FILE -> void {
	fclose_wrapper(f.cfile);
	delete f;
}

proc getcf f:FILE -> int {
	return fgetc_wrapper(f.cfile);
}

proc read_file f:FILE buf:ptr -> int {
	let ch = 0;
	let i = 0;
	while(ch != EOF) {
		ch = fgetc_wrapper(f.cfile);
		store8(buf + i, ch);
		i += 1;
	}
	store8(buf + (i - 1), 0);
	return i;
}