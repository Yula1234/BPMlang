include "std"

struct DynamicArray {
	size:int,
	capacity:int,
	data:ptr
}

proc new_dynarray _A_scapacity:int -> DynamicArray {
	return DynamicArray(0, _A_scapacity, memalloc(_A_scapacity * 4));
}

proc delete_dynarray da:DynamicArray -> void {
	memfree(da.data);
	delete da;
}

proc dynarray_extend da:DynamicArray -> void {
	let tmp = memalloc((da.capacity * 4) * 2);
	memcopy(tmp, da.data, da.size * 4);
	memfree(da.data);
	da.capacity = da.capacity * 2;
	da.data = tmp;
}

proc dynarray_push da:DynamicArray _A_value:any -> void {
	let value_as_i32 = cast(int, _A_value);
	if(da.size == da.capacity) {
		dynarray_extend(da);
	}
	store32(da.data + (da.size * 4), value_as_i32);
	da.size += 1;
}

proc dynarray_get da:DynamicArray index:int -> any {
	return rd32(da.data + (index * 4));
}

proc dynarray_pop da:DynamicArray -> any {
	let _result = dynarray_get(da, da.size - 1);
	da.size -= 1;
	return _result;
}

proc dynarray_is_empty da:DynamicArray -> int {
	return da.size == 0;
}

proc dynarray_front da:DynamicArray -> any {
	return dynarray_get(da, 0);
}

proc dynarray_back da:DynamicArray -> any {
	return dynarray_get(da, da.size - 1);
}

proc dynarray_addr_of da:DynamicArray index:int -> ptr {
	return cast(ptr, da.data + (index * 4));
}

proc dynarray_insert da:DynamicArray index:int _value:any -> void {
	let value_as_i32 = cast(int, _value);
	if(da.size == 0) {
		dynarray_push(da, _value);
		return;
	}
	if(da.size == da.capacity) {
		dynarray_extend(da);
	}
	memcopy(dynarray_addr_of(da, index + 1), dynarray_addr_of(da, index), (da.size * 4) - (index * 4));
	store32(dynarray_addr_of(da, index), value_as_i32);
	da.size += 1;
}

proc dynarray_erase da:DynamicArray index:int -> void {
	memcopy(dynarray_addr_of(da, index), dynarray_addr_of(da, index + 1), (da.size * 4) - (index * 4));
	da.size -= 1;
}

proc dynarray_clear da:DynamicArray -> void {
	da.size = 0;
}

proc dynarray_set da:DynamicArray index:int _value:any -> void {
	let value_as_i32 = cast(int, _value);
	store32(dynarray_addr_of(da, index), value_as_i32);
}

proc dynarray_print da:DynamicArray -> void {
	let size = da.size;
	puts("[");
	let i = 0;
	while(i < size) {
		putuwnl(cast(int, dynarray_get(da, i)));
		if(i != (size - 1)) {
			puts(", ");
		}
		i += 1;
	}
	puts("]\n");
}