include "std"
include "string"
include "string_view"
include "tbpm/arena"
include "tbpm/lexer"
include "dynamic_array"

proc push_ast ast:ptr index:ptr element:ptr -> void {
	store32(ast + (rd32(index) * 4), element);
	store32(index, rd32(index) + 1);
}

struct parser {
	tokens:ptr,
	index:int
}

proc new_parser tokens:ptr -> parser {
	return parser(tokens, 0);
}

proc parser_peek prs:parser -> Token {
	if(rd32(prs.tokens + (prs.index * 4)) == 0) {
		return cast(Token, 0);
	}
	return cast(Token, rd32(prs.tokens + (prs.index * 4)));
}

proc parser_peek_at prs:parser offs:int -> Token {
	if(rd32(prs.tokens + ((prs.index + offs) * 4)) == 0) {
		return cast(Token, 0);
	}
	return cast(Token, rd32(prs.tokens + ((prs.index + offs) * 4)));
}

proc parser_peek_prev prs:parser -> Token {
	if(rd32(prs.tokens + ((prs.index - 1) * 4)) == 0) {
		return cast(Token, 0);
	}
	return cast(Token, rd32(prs.tokens + ((prs.index - 1) * 4)));
}

proc parser_consume prs:parser -> Token {
	let tok = parser_peek(prs);
	prs.index = prs.index + 1;
	return tok;
}

struct NodeExprAdd {
	left:ptr,
	right:ptr,
	def:Token
}

struct NodeExprSub {
	left:ptr,
	right:ptr,
	def:Token
}

struct NodeExprMul {
	left:ptr,
	right:ptr,
	def:Token
}

struct NodeExprDiv {
	left:ptr,
	right:ptr,
	def:Token
}

struct NodeExprIdent {
	def:Token,
	ident:ptr
}

struct NodeExpr {
	kind:int,
	data:ptr
}

const NodeKindInt   iota;
const NodeKindPlus  iota;
const NodeKindMinus iota;
const NodeKindMul   iota;
const NodeKindDiv   iota;
const NodeKindIdent iota;
const NodeKindsCount reset;

proc Error str:ptr file:ptr line:int col:int -> void {
	format_print("%s:%d:%d ERROR: %s\n", file, line, col, str);
	exit(1);
}

proc parser_parse_term prs:parser -> NodeExpr {
	if(parser_peek(prs).type == TokenTypeIntLiteral) {
		let number_tok = parser_consume(prs);
		let expr_int = NodeExpr(NodeKindInt, number_tok.value);
		return expr_int;
	}
	if(parser_peek(prs).type == TokenTypeIdent) {
		let tok = parser_consume(prs);
		let expr_ident = NodeExprIdent(tok, tok.value);
		let fexpr = NodeExpr(NodeKindIdent, cast(ptr, expr_ident));
		return fexpr;
	}
	static_assert(TokenTypesCount == 17, "Please update this place");
	putu(parser_peek(prs).type);
	puts("Parser error (parse_term)\n");
	exit(1);
}

proc is_bin_operator toktype:int -> int {
	if(toktype == TokenTypePlus) {
		return true;
	}
	elif(toktype == TokenTypeMinus) {
		return true;
	}
	elif(toktype == TokenTypeStar) {
		return true;
	}
	elif(toktype == TokenTypeSlash) {
		return true;
	}
	static_assert(TokenTypesCount == 17, "Please update this place");
	return false;
}

proc parser_parse_expr prs:parser -> NodeExpr {
	let left_term = parser_parse_term(prs);
	if(is_bin_operator(parser_peek(prs).type) != 1) {
		return left_term;
	}
	static_assert(TokenTypesCount == 17, "Please update this place");
	let bin_def = parser_peek(prs);
	parser_consume(prs);
	let right_expr = parser_parse_expr(prs);
	if(bin_def.type == TokenTypePlus) {
		let bin_plus = NodeExprAdd(cast(ptr, left_term), cast(ptr, right_expr), bin_def);
		return NodeExpr(NodeKindPlus, cast(ptr, bin_plus));
	}
	elif(bin_def.type == TokenTypeMinus) {
		let bin_minus = NodeExprSub(cast(ptr, left_term), cast(ptr, right_expr), bin_def);
		return NodeExpr(NodeKindMinus, cast(ptr, bin_minus));
	}
	elif(bin_def.type == TokenTypeStar) {
		let bin_mul = NodeExprMul(cast(ptr, left_term), cast(ptr, right_expr), bin_def);
		return NodeExpr(NodeKindMul, cast(ptr, bin_mul));
	}
	elif(bin_def.type == TokenTypeSlash) {
		let bin_div = NodeExprDiv(cast(ptr, left_term), cast(ptr, right_expr), bin_def);
		return NodeExpr(NodeKindDiv, cast(ptr, bin_div));
	}
	Error("parser_parse_expr unreacheable", bin_def.file_loc, bin_def.line, bin_def.col);
}

proc parser_consume_err prs:parser type:int -> Token {
	let tok = parser_peek(prs);
	if(cast(int, tok) == 0) {
		let prev = parser_peek_prev(prs);
		format_print("%s:%d:%d ERROR: excepted %s, but got nothing\n", prev.file_loc, prev.line, prev.col, tokentype2str(type));
		exit(1);
	}
	elif(tok.type != type) {
		format_print("%s:%d:%d ERROR: excepted %s, but got %s\n", tok.file_loc, tok.line, tok.col, tokentype2str(type), tokentype2str(tok.type));
		exit(1);
	}
	parser_consume(prs);
	return tok;
}

struct NodeStmt {
	kind:int,
	data:ptr
}

struct NodeStmtExit {
	expr:ptr
}

struct NodeStmtPrint {
	expr:ptr
}

struct NodeStmtLet {
	name:ptr,
	expr:ptr,
	def:Token
}

struct NodeStmtBlock {
	stmts:DynamicArray
}

const PredKindElse iota;
const IfPredsCount reset;

struct IfPredElse {
	block:NodeStmtBlock
}

struct NodeIfPred {
	kind:int,
	data:ptr
}

struct NodeStmtIf {
	block:NodeStmtBlock,
	condition:NodeExpr,
	pred:ptr
}

const StmtKindExit  iota;
const StmtKindPrint iota;
const StmtKindLet   iota;
const StmtKindIf    iota;
const StmtKindsCount reset;

proc parser_parse_stmt prs:parser -> int;

proc parser_parse_block prs:parser -> NodeStmtBlock {
	if(parser_peek(prs).type != TokenTypeOpenCurly) {
		let tok = parser_peek(prs);
		Error("excepted {", tok.file_loc, tok.line, tok.col);
	}
	parser_consume(prs);
	let block = NodeStmtBlock(new_dynarray(8));
	while(true) {
		let _stmt = parser_parse_stmt(prs);
		if(_stmt == 0) {
			break;
		}
		dynarray_push(block.stmts, _stmt);
	}
	parser_consume_err(prs, TokenTypeCloseCurly);
	return block;
}

proc parser_parse_stmt prs:parser -> int {
	let def_tok: Token;
	static_assert(TokenTypesCount == 17, "Please update this place");
	static_assert(StmtKindsCount == 4, "Please update this place");
	if(parser_peek(prs).type == TokenTypeExit) {
		def_tok = parser_consume(prs);
		parser_consume_err(prs, TokenTypeOpenParen);
		let expr_exit = cast(ptr, parser_parse_expr(prs));
		let stmt_exit = NodeStmtExit(expr_exit);
		let stmt = NodeStmt(StmtKindExit, cast(ptr, stmt_exit));
		parser_consume_err(prs, TokenTypeCloseParen);
		parser_consume_err(prs, TokenTypeSemi);
		return cast(int, stmt);
	}
	elif(parser_peek(prs).type == TokenTypePrint) {
		def_tok = parser_consume(prs);
		parser_consume_err(prs, TokenTypeOpenParen);
		let expr_print = cast(ptr, parser_parse_expr(prs));
		let stmt_print = NodeStmtPrint(expr_print);
		let stmt = NodeStmt(StmtKindPrint, cast(ptr, stmt_print));
		parser_consume_err(prs, TokenTypeCloseParen);
		parser_consume_err(prs, TokenTypeSemi);
		return cast(int, stmt);
	}
	elif(parser_peek(prs).type == TokenTypeLet) {
		def_tok = parser_consume(prs);
		let ident_tok = parser_consume_err(prs, TokenTypeIdent);
		parser_consume_err(prs, TokenTypeEq);
		let expr_let = cast(ptr, parser_parse_expr(prs));
		let stmt_let = NodeStmtLet(ident_tok.value, expr_let, def_tok);
		let stmt = NodeStmt(StmtKindLet, cast(ptr, stmt_let));
		parser_consume_err(prs, TokenTypeSemi);
		return cast(int, stmt);
	}
	elif(parser_peek(prs).type == TokenTypeIf) {
		parser_consume(prs); // skip IF keyword
		parser_consume_err(prs, TokenTypeOpenParen);
		let _condition = parser_parse_expr(prs);
		parser_consume_err(prs, TokenTypeCloseParen);
		let block = parser_parse_block(prs);
		let stmt_if = NodeStmtIf(block, _condition, cast(ptr, 0));
		if(cast(int, parser_peek(prs)) != 0) {
			if(parser_peek(prs).type == TokenTypeElse) {
				parser_consume(prs);
				let else_block = parser_parse_block(prs);
				let else_pred = IfPredElse(else_block);
				stmt_if.pred = cast(ptr, NodeIfPred(PredKindElse, cast(ptr, else_pred)));
			}
		}
		let stmt = NodeStmt(StmtKindIf, cast(ptr, stmt_if));
		return cast(int, stmt);
	}
	else {
		return 0;
	}
	return 0;
}

proc parser_parse prs:parser ast:ptr -> void {
	let ast_level = 0;
	static_assert(StmtKindsCount == 4, "Please update this place");
	while(cast(int, parser_peek(prs)) != 0) {
		let stmt = parser_parse_stmt(prs);
		if(stmt == 0) {
			let tok = parser_peek(prs);
			Error("excepted statement", tok.file_loc, tok.line, tok.col);
		}
		push_ast(ast, &ast_level, cast(ptr, stmt));
	}
	store32(ast + (ast_level * 4), 0);
}