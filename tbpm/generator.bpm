include "std"
include "string"
include "string_view"
include "fsys"
include "tbpm/arena"
include "tbpm/lexer"
include "tbpm/parser"

struct Generator {
	asm_file:FILE,
	vars:ptr,
	vars_size:int,
	vars_index:int
}

struct Var {
	name:ptr,
	stack_loc:int
}

proc gen_var_lookup name:ptr gen:Generator -> int {
	let i = 0;
	while(i < gen.vars_index) {
		let var = cast(Var, rd32(gen.vars + (i * 4)));
		if(streq(var.name, name)) {
			return cast(int, var);
		}
		i += 1;
	}
	return 0;
}

proc new_generator asm_file:FILE -> Generator {
	return Generator(asm_file, memalloc(1024*4), 0, 0);
}

proc delete_generator gen:Generator -> void {
	closef(gen.asm_file);
	memfree(gen.vars);
	delete gen;
}

proc gen_generate_expr expr:NodeExpr gen:Generator -> void {
	if(expr.kind == NodeKindInt) {
		format_fprint(gen.asm_file.desc, "    push dword %s\n", expr.data);
	}
	elif(expr.kind == NodeKindIdent) {
		let expr_ident = cast(NodeExprIdent, expr.data);
		let svar = gen_var_lookup(expr_ident.ident, gen);
		if(svar == 0) {
			let etok = expr_ident.def;
			format_print("%s:%d:%d ERROR: unkown name `%s`\n", etok.file_loc, etok.line, etok.col, expr_ident.ident);
			exit(1);
		}
		let var = cast(Var, svar);
		format_fprint(gen.asm_file.desc, "    push dword [ebp-%d]\n", var.stack_loc);
	}
	elif(expr.kind == NodeKindPlus) {
		let bin_add = cast(NodeExprAdd, expr.data);
		gen_generate_expr(cast(NodeExpr, bin_add.left), gen);
		gen_generate_expr(cast(NodeExpr, bin_add.right), gen);
		fputs(gen.asm_file.desc, "    pop ebx\n");
		fputs(gen.asm_file.desc, "    pop eax\n");
		fputs(gen.asm_file.desc, "    add eax, ebx\n");
		fputs(gen.asm_file.desc, "    push eax\n");
	}
	elif(expr.kind == NodeKindMinus) {
		let bin_sub = cast(NodeExprSub, expr.data);
		gen_generate_expr(cast(NodeExpr, bin_sub.left), gen);
		gen_generate_expr(cast(NodeExpr, bin_sub.right), gen);
		fputs(gen.asm_file.desc, "    pop ebx\n");
		fputs(gen.asm_file.desc, "    pop eax\n");
		fputs(gen.asm_file.desc, "    sub eax, ebx\n");
		fputs(gen.asm_file.desc, "    push eax\n");
	}
	elif(expr.kind == NodeKindMul) {
		let mul_expr = cast(NodeExprMul, expr.data);
		gen_generate_expr(cast(NodeExpr, mul_expr.left), gen);
		gen_generate_expr(cast(NodeExpr, mul_expr.right), gen);
		fputs(gen.asm_file.desc, "    pop ebx\n");
		fputs(gen.asm_file.desc, "    pop eax\n");
		fputs(gen.asm_file.desc, "    imul eax, ebx\n");
		fputs(gen.asm_file.desc, "    push eax\n");
	}
	elif(expr.kind == NodeKindDiv) {
		let div_expr = cast(NodeExprMul, expr.data);
		gen_generate_expr(cast(NodeExpr, div_expr.left), gen);
		gen_generate_expr(cast(NodeExpr, div_expr.right), gen);
		fputs(gen.asm_file.desc, "    pop ebx\n");
		fputs(gen.asm_file.desc, "    pop eax\n");
		fputs(gen.asm_file.desc, "    xor edx, edx\n");
		fputs(gen.asm_file.desc, "    div ebx\n");
		fputs(gen.asm_file.desc, "    push eax\n");
		fputs(gen.asm_file.desc, "    mov edx, ecx\n");
	}
	else {
		format_print("ERROR: unkown expr.kind at `gen_generate_expr` - ");
		putu(expr.kind);
		exit(1);
	}
}

/* variables tools */
proc gen_create_var gen:Generator name:ptr def:Token -> void {
	let var = Var(name, (gen.vars_index * 4) + 4);
	gen.vars_index += 1;
	store32(gen.vars + gen.vars_size, var);
	gen.vars_size += 1;
}

proc gen_generate_exit stmt:NodeStmtExit gen:Generator -> void {
	let expr = cast(NodeExpr, stmt.expr);
	gen_generate_expr(expr, gen);
	fputs(gen.asm_file.desc, "    call ExitProcess@4\n");
	fputs(gen.asm_file.desc, "    add esp, 4\n");
}

proc gen_generate_print stmt:NodeStmtPrint gen:Generator -> void {
	let expr = cast(NodeExpr, stmt.expr);
	gen_generate_expr(expr, gen);
	fputs(gen.asm_file.desc, "    push numfmt\n");
	fputs(gen.asm_file.desc, "    call printf\n");
	fputs(gen.asm_file.desc, "    add esp, 8\n");
}

proc gen_generate_let stmt:NodeStmtLet gen:Generator -> void {
	gen_create_var(gen, stmt.name, stmt.def);
	gen_generate_expr(cast(NodeExpr, stmt.expr), gen);
	fputs(gen.asm_file.desc, "    pop edx\n");
	format_fprint(gen.asm_file.desc, "    mov dword [ebp-%d], edx\n", gen.vars_index * 4);
}

proc gen_stmt _stmt:ptr gen:Generator -> void {
	let stmt = cast(NodeStmt, _stmt);
	if(stmt.kind == StmtKindExit) {
		let stmt_exit = cast(NodeStmtExit, stmt.data);
		gen_generate_exit(stmt_exit, gen);
	}
	elif(stmt.kind == StmtKindPrint) {
		let stmt_print = cast(NodeStmtPrint, stmt.data);
		gen_generate_print(stmt_print, gen);
	}
	elif(stmt.kind == StmtKindLet) {
		let stmt_let = cast(NodeStmtLet, stmt.data);
		gen_generate_let(stmt_let, gen);
	}
	else {
		puts("unkown stmt at gen_stmt\n");
		exit(1);
	}
}

proc collect_allign ast:ptr -> int {
	let ast_level = 0;
	let allign = 0;
	while(rd32(ast +  (ast_level * 4)) != 0) {
		let stmt = cast(NodeStmt, rd32(ast +  (ast_level * 4)));
		if(stmt.kind == StmtKindLet) {
			allign += 1;
		}
		ast_level = ast_level + 1;
	}
	return allign;
}

proc gen_generate_header ast:ptr gen:Generator -> int {
	fputs(gen.asm_file.desc, "section .text\n\n");
	fputs(gen.asm_file.desc, "global main\n\n");
	fputs(gen.asm_file.desc, "extern printf\n");
	fputs(gen.asm_file.desc, "extern ExitProcess@4\n\n");
	fputs(gen.asm_file.desc, "main:\n");
	fputs(gen.asm_file.desc, "    push ebp\n");
	fputs(gen.asm_file.desc, "    mov ebp, esp\n");
	let allign = collect_allign(ast) * 4;
	format_fprint(gen.asm_file.desc, "    sub esp, %d\n", allign);
	return allign;
}

proc gen_generate_footer allign:int gen:Generator -> void {
	fputs(gen.asm_file.desc, "    xor eax, eax\n");
	format_fprint(gen.asm_file.desc, "    add esp, %d\n", allign);
	fputs(gen.asm_file.desc, "    pop ebp\n");
	fputs(gen.asm_file.desc, "    ret\n");
}

proc gen_generate_data gen:Generator -> void {
	fputs(gen.asm_file.desc, "\nsection .data\n");
	fputs(gen.asm_file.desc, "    numfmt: db \"%d\", 0xa, 0x0\n");
}

proc gen_generate ast:ptr gen:Generator -> void {
	let ast_level = 0;
	let allign = gen_generate_header(ast, gen);
	while(rd32(ast +  (ast_level * 4)) != 0) {
		gen_stmt(cast(ptr, rd32(ast +  (ast_level * 4))), gen);
		ast_level = ast_level + 1;
	}
	gen_generate_footer(allign, gen);
	gen_generate_data(gen);
}